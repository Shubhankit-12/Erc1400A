/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CertificateSignerMock,
  CertificateSignerMockInterface,
} from "../../../contracts/mocks/CertificateSignerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "CertificateSignerAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "CertificateSignerRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "addCertificateSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isCertificateSigner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "removeCertificateSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "renounceCertificateSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c1c38038062000c1c8339818101604052810190620000379190620002ed565b6200004981336200005060201b60201c565b506200043a565b620000a7816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206200010560201b620001821790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f9a01aee9f656aba8760d771cf21d803168ecc664c252c9374f4a3252481fbf3560405160405180910390a35050565b620001178282620001b860201b60201c565b156200015a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001519062000380565b60405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200022c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002239062000418565b60405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002b58262000288565b9050919050565b620002c781620002a8565b8114620002d357600080fd5b50565b600081519050620002e781620002bc565b92915050565b60006020828403121562000306576200030562000283565b5b60006200031684828501620002d6565b91505092915050565b600082825260208201905092915050565b7f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500600082015250565b600062000368601f836200031f565b9150620003758262000330565b602082019050919050565b600060208201905081810360008301526200039b8162000359565b9050919050565b7f526f6c65733a206163636f756e7420697320746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000620004006022836200031f565b91506200040d82620003a2565b604082019050919050565b600060208201905081810360008301526200043381620003f1565b9050919050565b6107d2806200044a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633bddaf8f146100515780639e59ceba1461006d578063c69664bb1461009d578063e81ea541146100b9575b600080fd5b61006b60048036038101906100669190610558565b6100d5565b005b61008760048036038101906100829190610585565b6100e2565b60405161009491906105e0565b60405180910390f35b6100b760048036038101906100b29190610585565b61013c565b005b6100d360048036038101906100ce9190610585565b61015f565b005b6100df813361022a565b50565b6000610134826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206102d890919063ffffffff16565b905092915050565b8161014781336100e2565b61015057600080fd5b61015a83836103a0565b505050565b8161016a81336100e2565b61017357600080fd5b61017d838361022a565b505050565b61018c82826102d8565b156101cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c390610658565b60405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b61027a816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061044e90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f795a3a12ab7aa35ee8d4681ead2986eae8de69f5491d9dccfeca0442f644db8160405160405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610349576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610340906106ea565b60405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6103f0816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061018290919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f9a01aee9f656aba8760d771cf21d803168ecc664c252c9374f4a3252481fbf3560405160405180910390a35050565b61045882826102d8565b610497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048e9061077c565b60405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610525826104fa565b9050919050565b6105358161051a565b811461054057600080fd5b50565b6000813590506105528161052c565b92915050565b60006020828403121561056e5761056d6104f5565b5b600061057c84828501610543565b91505092915050565b6000806040838503121561059c5761059b6104f5565b5b60006105aa85828601610543565b92505060206105bb85828601610543565b9150509250929050565b60008115159050919050565b6105da816105c5565b82525050565b60006020820190506105f560008301846105d1565b92915050565b600082825260208201905092915050565b7f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500600082015250565b6000610642601f836105fb565b915061064d8261060c565b602082019050919050565b6000602082019050818103600083015261067181610635565b9050919050565b7f526f6c65733a206163636f756e7420697320746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006106d46022836105fb565b91506106df82610678565b604082019050919050565b60006020820190508181036000830152610703816106c7565b9050919050565b7f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006107666021836105fb565b91506107718261070a565b604082019050919050565b6000602082019050818103600083015261079581610759565b905091905056fea2646970667358221220526c8c961959924edb2a23018b2a96e35fd2f73824fcce5dfe89aee61eaa707a64736f6c63430008090033";

type CertificateSignerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CertificateSignerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CertificateSignerMock__factory extends ContractFactory {
  constructor(...args: CertificateSignerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CertificateSignerMock> {
    return super.deploy(
      token,
      overrides || {}
    ) as Promise<CertificateSignerMock>;
  }
  override getDeployTransaction(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  override attach(address: string): CertificateSignerMock {
    return super.attach(address) as CertificateSignerMock;
  }
  override connect(signer: Signer): CertificateSignerMock__factory {
    return super.connect(signer) as CertificateSignerMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CertificateSignerMockInterface {
    return new utils.Interface(_abi) as CertificateSignerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CertificateSignerMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CertificateSignerMock;
  }
}

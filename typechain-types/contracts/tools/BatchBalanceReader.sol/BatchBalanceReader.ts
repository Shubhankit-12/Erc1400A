/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface BatchBalanceReaderInterface extends utils.Interface {
  functions: {
    "balancesOf(address[],address[])": FunctionFragment;
    "balancesOfByPartition(address[],address[],bytes32[])": FunctionFragment;
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "totalSupplies(address[])": FunctionFragment;
    "totalSuppliesByPartition(bytes32[],address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balancesOf"
      | "balancesOfByPartition"
      | "canImplementInterfaceForAddress"
      | "totalSupplies"
      | "totalSuppliesByPartition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balancesOf",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balancesOfByPartition",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplies",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSuppliesByPartition",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(functionFragment: "balancesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balancesOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSuppliesByPartition",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BatchBalanceReader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BatchBalanceReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balancesOf(
      tokenHolders: PromiseOrValue<string>[],
      tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    balancesOfByPartition(
      tokenHolders: PromiseOrValue<string>[],
      tokenAddresses: PromiseOrValue<string>[],
      partitions: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    canImplementInterfaceForAddress(
      interfaceHash: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupplies(
      tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    totalSuppliesByPartition(
      partitions: PromiseOrValue<BytesLike>[],
      tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;
  };

  balancesOf(
    tokenHolders: PromiseOrValue<string>[],
    tokenAddresses: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  balancesOfByPartition(
    tokenHolders: PromiseOrValue<string>[],
    tokenAddresses: PromiseOrValue<string>[],
    partitions: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  canImplementInterfaceForAddress(
    interfaceHash: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupplies(
    tokenAddresses: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  totalSuppliesByPartition(
    partitions: PromiseOrValue<BytesLike>[],
    tokenAddresses: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    balancesOf(
      tokenHolders: PromiseOrValue<string>[],
      tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    balancesOfByPartition(
      tokenHolders: PromiseOrValue<string>[],
      tokenAddresses: PromiseOrValue<string>[],
      partitions: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    canImplementInterfaceForAddress(
      interfaceHash: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupplies(
      tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    totalSuppliesByPartition(
      partitions: PromiseOrValue<BytesLike>[],
      tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    balancesOf(
      tokenHolders: PromiseOrValue<string>[],
      tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balancesOfByPartition(
      tokenHolders: PromiseOrValue<string>[],
      tokenAddresses: PromiseOrValue<string>[],
      partitions: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplies(
      tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSuppliesByPartition(
      partitions: PromiseOrValue<BytesLike>[],
      tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balancesOf(
      tokenHolders: PromiseOrValue<string>[],
      tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balancesOfByPartition(
      tokenHolders: PromiseOrValue<string>[],
      tokenAddresses: PromiseOrValue<string>[],
      partitions: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplies(
      tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSuppliesByPartition(
      partitions: PromiseOrValue<BytesLike>[],
      tokenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

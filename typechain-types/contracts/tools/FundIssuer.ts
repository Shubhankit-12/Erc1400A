/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface FundIssuerInterface extends utils.Interface {
  functions: {
    "batchExecutePaymentsAsController(uint256[],bool)": FunctionFragment;
    "batchSettleOrders(uint256[])": FunctionFragment;
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "executePaymentAsController(uint256,bool)": FunctionFragment;
    "executePaymentAsInvestor(uint256)": FunctionFragment;
    "finalizeCycle(uint256)": FunctionFragment;
    "getAssetRules(address,bytes32)": FunctionFragment;
    "getAssetValueRules(address,bytes32)": FunctionFragment;
    "getCycle(uint256)": FunctionFragment;
    "getCycleAssetValue(uint256)": FunctionFragment;
    "getCycleOrders(uint256)": FunctionFragment;
    "getCycleState(uint256)": FunctionFragment;
    "getInvestorOrders(address)": FunctionFragment;
    "getLastCycleIndex(address,bytes32)": FunctionFragment;
    "getNbCycles()": FunctionFragment;
    "getNbOrders()": FunctionFragment;
    "getOrder(uint256)": FunctionFragment;
    "getOrderAmountAndValue(uint256)": FunctionFragment;
    "getTotalSettledForCycle(uint256)": FunctionFragment;
    "priceOracles(address)": FunctionFragment;
    "rejectOrder(uint256,bool)": FunctionFragment;
    "setAssetRules(address,bytes32,uint256,uint256,uint256,uint256,uint8,address,bytes32,address,bool)": FunctionFragment;
    "setAssetValueRules(address,bytes32,uint8,uint256,uint256)": FunctionFragment;
    "setPriceOracles(address,address[])": FunctionFragment;
    "setTokenControllers(address,address[])": FunctionFragment;
    "subscribe(address,bytes32,uint256,uint256,uint8,bool)": FunctionFragment;
    "tokenControllers(address)": FunctionFragment;
    "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "valuate(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchExecutePaymentsAsController"
      | "batchSettleOrders"
      | "canImplementInterfaceForAddress"
      | "canReceive"
      | "cancelOrder"
      | "executePaymentAsController"
      | "executePaymentAsInvestor"
      | "finalizeCycle"
      | "getAssetRules"
      | "getAssetValueRules"
      | "getCycle"
      | "getCycleAssetValue"
      | "getCycleOrders"
      | "getCycleState"
      | "getInvestorOrders"
      | "getLastCycleIndex"
      | "getNbCycles"
      | "getNbOrders"
      | "getOrder"
      | "getOrderAmountAndValue"
      | "getTotalSettledForCycle"
      | "priceOracles"
      | "rejectOrder"
      | "setAssetRules"
      | "setAssetValueRules"
      | "setPriceOracles"
      | "setTokenControllers"
      | "subscribe"
      | "tokenControllers"
      | "tokensReceived"
      | "valuate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchExecutePaymentsAsController",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSettleOrders",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canReceive",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executePaymentAsController",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "executePaymentAsInvestor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeCycle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetRules",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetValueRules",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCycle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCycleAssetValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCycleOrders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCycleState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorOrders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastCycleIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNbCycles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNbOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderAmountAndValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSettledForCycle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetRules",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetValueRules",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracles",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenControllers",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenControllers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "valuate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchExecutePaymentsAsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSettleOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePaymentAsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePaymentAsInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetValueRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCycle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCycleAssetValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCycleOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCycleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastCycleIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNbCycles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNbOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderAmountAndValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSettledForCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetValueRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valuate", data: BytesLike): Result;

  events: {};
}

export interface FundIssuer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FundIssuerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchExecutePaymentsAsController(
      orderIndexes: PromiseOrValue<BigNumberish>[],
      bypassPayment: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchSettleOrders(
      orderIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    canReceive(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executePaymentAsController(
      orderIndex: PromiseOrValue<BigNumberish>,
      bypassPayment: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executePaymentAsInvestor(
      orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeCycle(
      cycleIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAssetRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        boolean
      ]
    >;

    getAssetValueRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, BigNumber]>;

    getCycle(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        boolean
      ]
    >;

    getCycleAssetValue(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, BigNumber]>;

    getCycleOrders(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getCycleState(
      cycleIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getInvestorOrders(
      investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getLastCycleIndex(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNbCycles(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNbOrders(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOrder(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, BigNumber, BigNumber, number, number]>;

    getOrderAmountAndValue(
      orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTotalSettledForCycle(
      cycleIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, boolean]>;

    priceOracles(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    rejectOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      rejected: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAssetRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      firstStartTime: PromiseOrValue<BigNumberish>,
      subscriptionPeriodLength: PromiseOrValue<BigNumberish>,
      valuationPeriodLength: PromiseOrValue<BigNumberish>,
      paymentPeriodLength: PromiseOrValue<BigNumberish>,
      paymentType: PromiseOrValue<BigNumberish>,
      paymentAddress: PromiseOrValue<string>,
      paymentPartition: PromiseOrValue<BytesLike>,
      fundAddress: PromiseOrValue<string>,
      subscriptionsOpened: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAssetValueRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      assetValueType: PromiseOrValue<BigNumberish>,
      assetValue: PromiseOrValue<BigNumberish>,
      reverseAssetValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceOracles(
      tokenAddress: PromiseOrValue<string>,
      oracles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenControllers(
      tokenAddress: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribe(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      orderValue: PromiseOrValue<BigNumberish>,
      orderAmount: PromiseOrValue<BigNumberish>,
      orderType: PromiseOrValue<BigNumberish>,
      executePaymentAtSubscription: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenControllers(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    tokensReceived(
      arg0: PromiseOrValue<BytesLike>,
      partition: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    valuate(
      cycleIndex: PromiseOrValue<BigNumberish>,
      assetValue: PromiseOrValue<BigNumberish>,
      reverseAssetValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  batchExecutePaymentsAsController(
    orderIndexes: PromiseOrValue<BigNumberish>[],
    bypassPayment: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchSettleOrders(
    orderIndexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canImplementInterfaceForAddress(
    interfaceHash: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  canReceive(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<string>,
    arg4: PromiseOrValue<string>,
    arg5: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operatorData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancelOrder(
    orderIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executePaymentAsController(
    orderIndex: PromiseOrValue<BigNumberish>,
    bypassPayment: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executePaymentAsInvestor(
    orderIndex: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeCycle(
    cycleIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAssetRules(
    assetAddress: PromiseOrValue<string>,
    assetClass: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string,
      string,
      boolean
    ]
  >;

  getAssetValueRules(
    assetAddress: PromiseOrValue<string>,
    assetClass: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber, BigNumber]>;

  getCycle(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string,
      boolean
    ]
  >;

  getCycleAssetValue(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber, BigNumber]>;

  getCycleOrders(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getCycleState(
    cycleIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getInvestorOrders(
    investor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getLastCycleIndex(
    assetAddress: PromiseOrValue<string>,
    assetClass: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNbCycles(overrides?: CallOverrides): Promise<BigNumber>;

  getNbOrders(overrides?: CallOverrides): Promise<BigNumber>;

  getOrder(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, BigNumber, BigNumber, number, number]>;

  getOrderAmountAndValue(
    orderIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getTotalSettledForCycle(
    cycleIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, boolean]>;

  priceOracles(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  rejectOrder(
    orderIndex: PromiseOrValue<BigNumberish>,
    rejected: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAssetRules(
    assetAddress: PromiseOrValue<string>,
    assetClass: PromiseOrValue<BytesLike>,
    firstStartTime: PromiseOrValue<BigNumberish>,
    subscriptionPeriodLength: PromiseOrValue<BigNumberish>,
    valuationPeriodLength: PromiseOrValue<BigNumberish>,
    paymentPeriodLength: PromiseOrValue<BigNumberish>,
    paymentType: PromiseOrValue<BigNumberish>,
    paymentAddress: PromiseOrValue<string>,
    paymentPartition: PromiseOrValue<BytesLike>,
    fundAddress: PromiseOrValue<string>,
    subscriptionsOpened: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAssetValueRules(
    assetAddress: PromiseOrValue<string>,
    assetClass: PromiseOrValue<BytesLike>,
    assetValueType: PromiseOrValue<BigNumberish>,
    assetValue: PromiseOrValue<BigNumberish>,
    reverseAssetValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceOracles(
    tokenAddress: PromiseOrValue<string>,
    oracles: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenControllers(
    tokenAddress: PromiseOrValue<string>,
    operators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribe(
    assetAddress: PromiseOrValue<string>,
    assetClass: PromiseOrValue<BytesLike>,
    orderValue: PromiseOrValue<BigNumberish>,
    orderAmount: PromiseOrValue<BigNumberish>,
    orderType: PromiseOrValue<BigNumberish>,
    executePaymentAtSubscription: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenControllers(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  tokensReceived(
    arg0: PromiseOrValue<BytesLike>,
    partition: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  valuate(
    cycleIndex: PromiseOrValue<BigNumberish>,
    assetValue: PromiseOrValue<BigNumberish>,
    reverseAssetValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchExecutePaymentsAsController(
      orderIndexes: PromiseOrValue<BigNumberish>[],
      bypassPayment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchSettleOrders(
      orderIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    canImplementInterfaceForAddress(
      interfaceHash: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    canReceive(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executePaymentAsController(
      orderIndex: PromiseOrValue<BigNumberish>,
      bypassPayment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    executePaymentAsInvestor(
      orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeCycle(
      cycleIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        boolean
      ]
    >;

    getAssetValueRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, BigNumber]>;

    getCycle(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        boolean
      ]
    >;

    getCycleAssetValue(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, BigNumber]>;

    getCycleOrders(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getCycleState(
      cycleIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getInvestorOrders(
      investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getLastCycleIndex(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNbCycles(overrides?: CallOverrides): Promise<BigNumber>;

    getNbOrders(overrides?: CallOverrides): Promise<BigNumber>;

    getOrder(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, BigNumber, BigNumber, number, number]>;

    getOrderAmountAndValue(
      orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTotalSettledForCycle(
      cycleIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, boolean]>;

    priceOracles(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    rejectOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      rejected: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAssetRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      firstStartTime: PromiseOrValue<BigNumberish>,
      subscriptionPeriodLength: PromiseOrValue<BigNumberish>,
      valuationPeriodLength: PromiseOrValue<BigNumberish>,
      paymentPeriodLength: PromiseOrValue<BigNumberish>,
      paymentType: PromiseOrValue<BigNumberish>,
      paymentAddress: PromiseOrValue<string>,
      paymentPartition: PromiseOrValue<BytesLike>,
      fundAddress: PromiseOrValue<string>,
      subscriptionsOpened: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAssetValueRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      assetValueType: PromiseOrValue<BigNumberish>,
      assetValue: PromiseOrValue<BigNumberish>,
      reverseAssetValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOracles(
      tokenAddress: PromiseOrValue<string>,
      oracles: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenControllers(
      tokenAddress: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    subscribe(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      orderValue: PromiseOrValue<BigNumberish>,
      orderAmount: PromiseOrValue<BigNumberish>,
      orderType: PromiseOrValue<BigNumberish>,
      executePaymentAtSubscription: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenControllers(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    tokensReceived(
      arg0: PromiseOrValue<BytesLike>,
      partition: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    valuate(
      cycleIndex: PromiseOrValue<BigNumberish>,
      assetValue: PromiseOrValue<BigNumberish>,
      reverseAssetValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    batchExecutePaymentsAsController(
      orderIndexes: PromiseOrValue<BigNumberish>[],
      bypassPayment: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchSettleOrders(
      orderIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canReceive(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executePaymentAsController(
      orderIndex: PromiseOrValue<BigNumberish>,
      bypassPayment: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executePaymentAsInvestor(
      orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeCycle(
      cycleIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAssetRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetValueRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCycle(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCycleAssetValue(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCycleOrders(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCycleState(
      cycleIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestorOrders(
      investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastCycleIndex(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNbCycles(overrides?: CallOverrides): Promise<BigNumber>;

    getNbOrders(overrides?: CallOverrides): Promise<BigNumber>;

    getOrder(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderAmountAndValue(
      orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSettledForCycle(
      cycleIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOracles(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      rejected: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAssetRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      firstStartTime: PromiseOrValue<BigNumberish>,
      subscriptionPeriodLength: PromiseOrValue<BigNumberish>,
      valuationPeriodLength: PromiseOrValue<BigNumberish>,
      paymentPeriodLength: PromiseOrValue<BigNumberish>,
      paymentType: PromiseOrValue<BigNumberish>,
      paymentAddress: PromiseOrValue<string>,
      paymentPartition: PromiseOrValue<BytesLike>,
      fundAddress: PromiseOrValue<string>,
      subscriptionsOpened: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAssetValueRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      assetValueType: PromiseOrValue<BigNumberish>,
      assetValue: PromiseOrValue<BigNumberish>,
      reverseAssetValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceOracles(
      tokenAddress: PromiseOrValue<string>,
      oracles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenControllers(
      tokenAddress: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribe(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      orderValue: PromiseOrValue<BigNumberish>,
      orderAmount: PromiseOrValue<BigNumberish>,
      orderType: PromiseOrValue<BigNumberish>,
      executePaymentAtSubscription: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenControllers(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensReceived(
      arg0: PromiseOrValue<BytesLike>,
      partition: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    valuate(
      cycleIndex: PromiseOrValue<BigNumberish>,
      assetValue: PromiseOrValue<BigNumberish>,
      reverseAssetValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchExecutePaymentsAsController(
      orderIndexes: PromiseOrValue<BigNumberish>[],
      bypassPayment: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchSettleOrders(
      orderIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canReceive(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executePaymentAsController(
      orderIndex: PromiseOrValue<BigNumberish>,
      bypassPayment: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executePaymentAsInvestor(
      orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeCycle(
      cycleIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAssetRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetValueRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCycle(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCycleAssetValue(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCycleOrders(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCycleState(
      cycleIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvestorOrders(
      investor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastCycleIndex(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNbCycles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNbOrders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrder(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderAmountAndValue(
      orderIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSettledForCycle(
      cycleIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOracles(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectOrder(
      orderIndex: PromiseOrValue<BigNumberish>,
      rejected: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAssetRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      firstStartTime: PromiseOrValue<BigNumberish>,
      subscriptionPeriodLength: PromiseOrValue<BigNumberish>,
      valuationPeriodLength: PromiseOrValue<BigNumberish>,
      paymentPeriodLength: PromiseOrValue<BigNumberish>,
      paymentType: PromiseOrValue<BigNumberish>,
      paymentAddress: PromiseOrValue<string>,
      paymentPartition: PromiseOrValue<BytesLike>,
      fundAddress: PromiseOrValue<string>,
      subscriptionsOpened: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAssetValueRules(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      assetValueType: PromiseOrValue<BigNumberish>,
      assetValue: PromiseOrValue<BigNumberish>,
      reverseAssetValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceOracles(
      tokenAddress: PromiseOrValue<string>,
      oracles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenControllers(
      tokenAddress: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribe(
      assetAddress: PromiseOrValue<string>,
      assetClass: PromiseOrValue<BytesLike>,
      orderValue: PromiseOrValue<BigNumberish>,
      orderAmount: PromiseOrValue<BigNumberish>,
      orderType: PromiseOrValue<BigNumberish>,
      executePaymentAtSubscription: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenControllers(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      arg0: PromiseOrValue<BytesLike>,
      partition: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    valuate(
      cycleIndex: PromiseOrValue<BigNumberish>,
      assetValue: PromiseOrValue<BigNumberish>,
      reverseAssetValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

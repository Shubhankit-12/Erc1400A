/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Swaps {
  export type UserTradeDataStruct = {
    tokenAddress: PromiseOrValue<string>;
    tokenValue: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BytesLike>;
    tokenStandard: PromiseOrValue<BigNumberish>;
    accepted: PromiseOrValue<boolean>;
    approved: PromiseOrValue<boolean>;
    tradeType: PromiseOrValue<BigNumberish>;
  };

  export type UserTradeDataStructOutput = [
    string,
    BigNumber,
    string,
    number,
    boolean,
    boolean,
    number
  ] & {
    tokenAddress: string;
    tokenValue: BigNumber;
    tokenId: string;
    tokenStandard: number;
    accepted: boolean;
    approved: boolean;
    tradeType: number;
  };

  export type TradeStruct = {
    holder1: PromiseOrValue<string>;
    holder2: PromiseOrValue<string>;
    executer: PromiseOrValue<string>;
    expirationDate: PromiseOrValue<BigNumberish>;
    settlementDate: PromiseOrValue<BigNumberish>;
    userTradeData1: Swaps.UserTradeDataStruct;
    userTradeData2: Swaps.UserTradeDataStruct;
    state: PromiseOrValue<BigNumberish>;
  };

  export type TradeStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    Swaps.UserTradeDataStructOutput,
    Swaps.UserTradeDataStructOutput,
    number
  ] & {
    holder1: string;
    holder2: string;
    executer: string;
    expirationDate: BigNumber;
    settlementDate: BigNumber;
    userTradeData1: Swaps.UserTradeDataStructOutput;
    userTradeData2: Swaps.UserTradeDataStructOutput;
    state: number;
  };

  export type TradeRequestInputStruct = {
    holder1: PromiseOrValue<string>;
    holder2: PromiseOrValue<string>;
    executer: PromiseOrValue<string>;
    expirationDate: PromiseOrValue<BigNumberish>;
    tokenAddress1: PromiseOrValue<string>;
    tokenValue1: PromiseOrValue<BigNumberish>;
    tokenId1: PromiseOrValue<BytesLike>;
    tokenStandard1: PromiseOrValue<BigNumberish>;
    tokenAddress2: PromiseOrValue<string>;
    tokenValue2: PromiseOrValue<BigNumberish>;
    tokenId2: PromiseOrValue<BytesLike>;
    tokenStandard2: PromiseOrValue<BigNumberish>;
    tradeType1: PromiseOrValue<BigNumberish>;
    tradeType2: PromiseOrValue<BigNumberish>;
    settlementDate: PromiseOrValue<BigNumberish>;
  };

  export type TradeRequestInputStructOutput = [
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    number,
    string,
    BigNumber,
    string,
    number,
    number,
    number,
    BigNumber
  ] & {
    holder1: string;
    holder2: string;
    executer: string;
    expirationDate: BigNumber;
    tokenAddress1: string;
    tokenValue1: BigNumber;
    tokenId1: string;
    tokenStandard1: number;
    tokenAddress2: string;
    tokenValue2: BigNumber;
    tokenId2: string;
    tokenStandard2: number;
    tradeType1: number;
    tradeType2: number;
    settlementDate: BigNumber;
  };
}

export interface SwapsInterface extends utils.Interface {
  functions: {
    "acceptTrade(uint256,bytes32)": FunctionFragment;
    "approveTrade(uint256,bool)": FunctionFragment;
    "approveTradeWithPreimage(uint256,bool,bytes32)": FunctionFragment;
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "cancelTrade(uint256)": FunctionFragment;
    "executeTrade(uint256)": FunctionFragment;
    "executeTradeWithPreimage(uint256,bytes32)": FunctionFragment;
    "forceTrade(uint256)": FunctionFragment;
    "forceTradeWithPreimage(uint256,bytes32)": FunctionFragment;
    "getNbTrades()": FunctionFragment;
    "getPrice(uint256)": FunctionFragment;
    "getPriceOwnership(address,address)": FunctionFragment;
    "getTokenPrice(address,address,bytes32,bytes32)": FunctionFragment;
    "getTrade(uint256)": FunctionFragment;
    "getTradeAcceptanceStatus(uint256)": FunctionFragment;
    "getTradeApprovalStatus(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "priceOracles(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestTrade((address,address,address,uint256,address,uint256,bytes32,uint8,address,uint256,bytes32,uint8,uint8,uint8,uint256),bytes32)": FunctionFragment;
    "setPriceOracles(address,address[])": FunctionFragment;
    "setPriceOwnership(address,address,bool)": FunctionFragment;
    "setTokenControllers(address,address[])": FunctionFragment;
    "setTokenPrice(address,address,bytes32,bytes32,uint256)": FunctionFragment;
    "setTradeExecuters(address[])": FunctionFragment;
    "setVariablePriceStartDate(address,uint256)": FunctionFragment;
    "tokenControllers(address)": FunctionFragment;
    "tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "tradeExecuters()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "variablePriceStartDate(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptTrade"
      | "approveTrade"
      | "approveTradeWithPreimage"
      | "canImplementInterfaceForAddress"
      | "canReceive"
      | "cancelTrade"
      | "executeTrade"
      | "executeTradeWithPreimage"
      | "forceTrade"
      | "forceTradeWithPreimage"
      | "getNbTrades"
      | "getPrice"
      | "getPriceOwnership"
      | "getTokenPrice"
      | "getTrade"
      | "getTradeAcceptanceStatus"
      | "getTradeApprovalStatus"
      | "owner"
      | "priceOracles"
      | "renounceOwnership"
      | "requestTrade"
      | "setPriceOracles"
      | "setPriceOwnership"
      | "setTokenControllers"
      | "setTokenPrice"
      | "setTradeExecuters"
      | "setVariablePriceStartDate"
      | "tokenControllers"
      | "tokensReceived"
      | "tradeExecuters"
      | "transferOwnership"
      | "variablePriceStartDate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptTrade",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTrade",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTradeWithPreimage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canReceive",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTradeWithPreimage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceTrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceTradeWithPreimage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNbTrades",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOwnership",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeAcceptanceStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeApprovalStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceOracles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestTrade",
    values: [Swaps.TradeRequestInputStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracles",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOwnership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenControllers",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradeExecuters",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVariablePriceStartDate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenControllers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeExecuters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "variablePriceStartDate",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTradeWithPreimage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTradeWithPreimage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceTradeWithPreimage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNbTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradeAcceptanceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeApprovalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradeExecuters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVariablePriceStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeExecuters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variablePriceStartDate",
    data: BytesLike
  ): Result;

  events: {
    "CreateNote(address,bytes32,bytes)": EventFragment;
    "DestroyNote(address,bytes32)": EventFragment;
    "ExecutedHold(address,bytes32,bytes32,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateNote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DestroyNote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferByPartition"): EventFragment;
}

export interface CreateNoteEventObject {
  owner: string;
  noteHash: string;
  metadata: string;
}
export type CreateNoteEvent = TypedEvent<
  [string, string, string],
  CreateNoteEventObject
>;

export type CreateNoteEventFilter = TypedEventFilter<CreateNoteEvent>;

export interface DestroyNoteEventObject {
  owner: string;
  noteHash: string;
}
export type DestroyNoteEvent = TypedEvent<
  [string, string],
  DestroyNoteEventObject
>;

export type DestroyNoteEventFilter = TypedEventFilter<DestroyNoteEvent>;

export interface ExecutedHoldEventObject {
  token: string;
  holdId: string;
  lockPreimage: string;
  recipient: string;
}
export type ExecutedHoldEvent = TypedEvent<
  [string, string, string, string],
  ExecutedHoldEventObject
>;

export type ExecutedHoldEventFilter = TypedEventFilter<ExecutedHoldEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokens: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransferByPartitionEventObject {
  fromPartition: string;
  operator: string;
  from: string;
  to: string;
  value: BigNumber;
  data: string;
  operatorData: string;
}
export type TransferByPartitionEvent = TypedEvent<
  [string, string, string, string, BigNumber, string, string],
  TransferByPartitionEventObject
>;

export type TransferByPartitionEventFilter =
  TypedEventFilter<TransferByPartitionEvent>;

export interface Swaps extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptTrade(
      index: PromiseOrValue<BigNumberish>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveTrade(
      index: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveTradeWithPreimage(
      index: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<boolean>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    canReceive(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTradeWithPreimage(
      index: PromiseOrValue<BigNumberish>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceTradeWithPreimage(
      index: PromiseOrValue<BigNumberish>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNbTrades(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceOwnership(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTokenPrice(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      tokenId1: PromiseOrValue<BytesLike>,
      tokenId2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Swaps.TradeStructOutput]>;

    getTradeAcceptanceStatus(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTradeApprovalStatus(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceOracles(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestTrade(
      inputData: Swaps.TradeRequestInputStruct,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceOracles(
      tokenAddress: PromiseOrValue<string>,
      oracles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceOwnership(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      priceOwnership: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenControllers(
      tokenAddress: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenPrice(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      tokenId1: PromiseOrValue<BytesLike>,
      tokenId2: PromiseOrValue<BytesLike>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTradeExecuters(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVariablePriceStartDate(
      tokenAddress: PromiseOrValue<string>,
      startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenControllers(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    tokensReceived(
      arg0: PromiseOrValue<BytesLike>,
      partition: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradeExecuters(overrides?: CallOverrides): Promise<[string[]]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    variablePriceStartDate(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  acceptTrade(
    index: PromiseOrValue<BigNumberish>,
    preimage: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveTrade(
    index: PromiseOrValue<BigNumberish>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveTradeWithPreimage(
    index: PromiseOrValue<BigNumberish>,
    approved: PromiseOrValue<boolean>,
    preimage: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canImplementInterfaceForAddress(
    interfaceHash: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  canReceive(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<string>,
    arg4: PromiseOrValue<string>,
    arg5: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operatorData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancelTrade(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTrade(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTradeWithPreimage(
    index: PromiseOrValue<BigNumberish>,
    preimage: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceTrade(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceTradeWithPreimage(
    index: PromiseOrValue<BigNumberish>,
    preimage: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNbTrades(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceOwnership(
    tokenAddress1: PromiseOrValue<string>,
    tokenAddress2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTokenPrice(
    tokenAddress1: PromiseOrValue<string>,
    tokenAddress2: PromiseOrValue<string>,
    tokenId1: PromiseOrValue<BytesLike>,
    tokenId2: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTrade(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Swaps.TradeStructOutput>;

  getTradeAcceptanceStatus(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTradeApprovalStatus(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceOracles(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestTrade(
    inputData: Swaps.TradeRequestInputStruct,
    preimage: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceOracles(
    tokenAddress: PromiseOrValue<string>,
    oracles: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceOwnership(
    tokenAddress1: PromiseOrValue<string>,
    tokenAddress2: PromiseOrValue<string>,
    priceOwnership: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenControllers(
    tokenAddress: PromiseOrValue<string>,
    operators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenPrice(
    tokenAddress1: PromiseOrValue<string>,
    tokenAddress2: PromiseOrValue<string>,
    tokenId1: PromiseOrValue<BytesLike>,
    tokenId2: PromiseOrValue<BytesLike>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTradeExecuters(
    operators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVariablePriceStartDate(
    tokenAddress: PromiseOrValue<string>,
    startDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenControllers(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  tokensReceived(
    arg0: PromiseOrValue<BytesLike>,
    partition: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operatorData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradeExecuters(overrides?: CallOverrides): Promise<string[]>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  variablePriceStartDate(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    acceptTrade(
      index: PromiseOrValue<BigNumberish>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveTrade(
      index: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveTradeWithPreimage(
      index: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<boolean>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    canImplementInterfaceForAddress(
      interfaceHash: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    canReceive(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTradeWithPreimage(
      index: PromiseOrValue<BigNumberish>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    forceTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    forceTradeWithPreimage(
      index: PromiseOrValue<BigNumberish>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getNbTrades(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceOwnership(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTokenPrice(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      tokenId1: PromiseOrValue<BytesLike>,
      tokenId2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Swaps.TradeStructOutput>;

    getTradeAcceptanceStatus(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTradeApprovalStatus(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceOracles(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestTrade(
      inputData: Swaps.TradeRequestInputStruct,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOracles(
      tokenAddress: PromiseOrValue<string>,
      oracles: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOwnership(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      priceOwnership: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenControllers(
      tokenAddress: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenPrice(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      tokenId1: PromiseOrValue<BytesLike>,
      tokenId2: PromiseOrValue<BytesLike>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradeExecuters(
      operators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setVariablePriceStartDate(
      tokenAddress: PromiseOrValue<string>,
      startDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenControllers(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    tokensReceived(
      arg0: PromiseOrValue<BytesLike>,
      partition: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeExecuters(overrides?: CallOverrides): Promise<string[]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    variablePriceStartDate(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CreateNote(address,bytes32,bytes)"(
      owner?: PromiseOrValue<string> | null,
      noteHash?: PromiseOrValue<BytesLike> | null,
      metadata?: null
    ): CreateNoteEventFilter;
    CreateNote(
      owner?: PromiseOrValue<string> | null,
      noteHash?: PromiseOrValue<BytesLike> | null,
      metadata?: null
    ): CreateNoteEventFilter;

    "DestroyNote(address,bytes32)"(
      owner?: PromiseOrValue<string> | null,
      noteHash?: PromiseOrValue<BytesLike> | null
    ): DestroyNoteEventFilter;
    DestroyNote(
      owner?: PromiseOrValue<string> | null,
      noteHash?: PromiseOrValue<BytesLike> | null
    ): DestroyNoteEventFilter;

    "ExecutedHold(address,bytes32,bytes32,address)"(
      token?: PromiseOrValue<string> | null,
      holdId?: PromiseOrValue<BytesLike> | null,
      lockPreimage?: null,
      recipient?: null
    ): ExecutedHoldEventFilter;
    ExecutedHold(
      token?: PromiseOrValue<string> | null,
      holdId?: PromiseOrValue<BytesLike> | null,
      lockPreimage?: null,
      recipient?: null
    ): ExecutedHoldEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokens?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokens?: null
    ): TransferEventFilter;

    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)"(
      fromPartition?: PromiseOrValue<BytesLike> | null,
      operator?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): TransferByPartitionEventFilter;
    TransferByPartition(
      fromPartition?: PromiseOrValue<BytesLike> | null,
      operator?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operatorData?: null
    ): TransferByPartitionEventFilter;
  };

  estimateGas: {
    acceptTrade(
      index: PromiseOrValue<BigNumberish>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveTrade(
      index: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveTradeWithPreimage(
      index: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<boolean>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canReceive(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTradeWithPreimage(
      index: PromiseOrValue<BigNumberish>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceTradeWithPreimage(
      index: PromiseOrValue<BigNumberish>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNbTrades(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceOwnership(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPrice(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      tokenId1: PromiseOrValue<BytesLike>,
      tokenId2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeAcceptanceStatus(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeApprovalStatus(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracles(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestTrade(
      inputData: Swaps.TradeRequestInputStruct,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceOracles(
      tokenAddress: PromiseOrValue<string>,
      oracles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceOwnership(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      priceOwnership: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenControllers(
      tokenAddress: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenPrice(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      tokenId1: PromiseOrValue<BytesLike>,
      tokenId2: PromiseOrValue<BytesLike>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTradeExecuters(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVariablePriceStartDate(
      tokenAddress: PromiseOrValue<string>,
      startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenControllers(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensReceived(
      arg0: PromiseOrValue<BytesLike>,
      partition: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradeExecuters(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    variablePriceStartDate(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptTrade(
      index: PromiseOrValue<BigNumberish>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveTrade(
      index: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveTradeWithPreimage(
      index: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<boolean>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canReceive(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTradeWithPreimage(
      index: PromiseOrValue<BigNumberish>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceTradeWithPreimage(
      index: PromiseOrValue<BigNumberish>,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNbTrades(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceOwnership(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPrice(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      tokenId1: PromiseOrValue<BytesLike>,
      tokenId2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrade(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeAcceptanceStatus(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeApprovalStatus(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracles(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestTrade(
      inputData: Swaps.TradeRequestInputStruct,
      preimage: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceOracles(
      tokenAddress: PromiseOrValue<string>,
      oracles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceOwnership(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      priceOwnership: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenControllers(
      tokenAddress: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenPrice(
      tokenAddress1: PromiseOrValue<string>,
      tokenAddress2: PromiseOrValue<string>,
      tokenId1: PromiseOrValue<BytesLike>,
      tokenId2: PromiseOrValue<BytesLike>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTradeExecuters(
      operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVariablePriceStartDate(
      tokenAddress: PromiseOrValue<string>,
      startDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenControllers(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      arg0: PromiseOrValue<BytesLike>,
      partition: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operatorData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradeExecuters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    variablePriceStartDate(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

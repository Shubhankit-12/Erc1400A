/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type ERC20HoldDataStruct = {
  sender: PromiseOrValue<string>;
  recipient: PromiseOrValue<string>;
  notary: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  expirationDateTime: PromiseOrValue<BigNumberish>;
  secretHash: PromiseOrValue<BytesLike>;
  status: PromiseOrValue<BigNumberish>;
};

export type ERC20HoldDataStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  number
] & {
  sender: string;
  recipient: string;
  notary: string;
  amount: BigNumber;
  expirationDateTime: BigNumber;
  secretHash: string;
  status: number;
};

export interface IERC20HoldableTokenInterface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOnHold(address)": FunctionFragment;
    "executeHold(bytes32,bytes32)": FunctionFragment;
    "executeHold(bytes32,bytes32,address)": FunctionFragment;
    "executeHold(bytes32)": FunctionFragment;
    "hold(bytes32,address,address,uint256,uint256,bytes32)": FunctionFragment;
    "holdStatus(bytes32)": FunctionFragment;
    "releaseHold(bytes32)": FunctionFragment;
    "retrieveHoldData(bytes32)": FunctionFragment;
    "spendableBalanceOf(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyOnHold()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOnHold"
      | "executeHold(bytes32,bytes32)"
      | "executeHold(bytes32,bytes32,address)"
      | "executeHold(bytes32)"
      | "hold"
      | "holdStatus"
      | "releaseHold"
      | "retrieveHoldData"
      | "spendableBalanceOf"
      | "totalSupply"
      | "totalSupplyOnHold"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOnHold",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold(bytes32,bytes32,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hold",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "holdStatus",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseHold",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveHoldData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "spendableBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnHold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold(bytes32,bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "holdStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveHoldData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendableBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ExecutedHold(bytes32,bytes32,address)": EventFragment;
    "NewHold(bytes32,address,address,uint256,uint256,bytes32)": EventFragment;
    "ReleaseHold(bytes32,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseHold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ExecutedHoldEventObject {
  holdId: string;
  lockPreimage: string;
  recipient: string;
}
export type ExecutedHoldEvent = TypedEvent<
  [string, string, string],
  ExecutedHoldEventObject
>;

export type ExecutedHoldEventFilter = TypedEventFilter<ExecutedHoldEvent>;

export interface NewHoldEventObject {
  holdId: string;
  recipient: string;
  notary: string;
  amount: BigNumber;
  expirationDateTime: BigNumber;
  lockHash: string;
}
export type NewHoldEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string],
  NewHoldEventObject
>;

export type NewHoldEventFilter = TypedEventFilter<NewHoldEvent>;

export interface ReleaseHoldEventObject {
  holdId: string;
  sender: string;
}
export type ReleaseHoldEvent = TypedEvent<
  [string, string],
  ReleaseHoldEventObject
>;

export type ReleaseHoldEventFilter = TypedEventFilter<ReleaseHoldEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface IERC20HoldableToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC20HoldableTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOnHold(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "executeHold(bytes32,bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "executeHold(bytes32,bytes32,address)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "executeHold(bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hold(
      holdId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    holdStatus(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    releaseHold(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrieveHoldData(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ERC20HoldDataStructOutput]>;

    spendableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOnHold(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "executeHold(bytes32,bytes32)"(
    holdId: PromiseOrValue<BytesLike>,
    lockPreimage: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "executeHold(bytes32,bytes32,address)"(
    holdId: PromiseOrValue<BytesLike>,
    lockPreimage: PromiseOrValue<BytesLike>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "executeHold(bytes32)"(
    holdId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hold(
    holdId: PromiseOrValue<BytesLike>,
    recipient: PromiseOrValue<string>,
    notary: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    expirationDateTime: PromiseOrValue<BigNumberish>,
    lockHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  holdStatus(
    holdId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  releaseHold(
    holdId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrieveHoldData(
    holdId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ERC20HoldDataStructOutput>;

  spendableBalanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOnHold(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "executeHold(bytes32,bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeHold(bytes32,bytes32,address)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeHold(bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    hold(
      holdId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    holdStatus(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    releaseHold(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveHoldData(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ERC20HoldDataStructOutput>;

    spendableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "ExecutedHold(bytes32,bytes32,address)"(
      holdId?: PromiseOrValue<BytesLike> | null,
      lockPreimage?: null,
      recipient?: null
    ): ExecutedHoldEventFilter;
    ExecutedHold(
      holdId?: PromiseOrValue<BytesLike> | null,
      lockPreimage?: null,
      recipient?: null
    ): ExecutedHoldEventFilter;

    "NewHold(bytes32,address,address,uint256,uint256,bytes32)"(
      holdId?: PromiseOrValue<BytesLike> | null,
      recipient?: PromiseOrValue<string> | null,
      notary?: PromiseOrValue<string> | null,
      amount?: null,
      expirationDateTime?: null,
      lockHash?: null
    ): NewHoldEventFilter;
    NewHold(
      holdId?: PromiseOrValue<BytesLike> | null,
      recipient?: PromiseOrValue<string> | null,
      notary?: PromiseOrValue<string> | null,
      amount?: null,
      expirationDateTime?: null,
      lockHash?: null
    ): NewHoldEventFilter;

    "ReleaseHold(bytes32,address)"(
      holdId?: PromiseOrValue<BytesLike> | null,
      sender?: null
    ): ReleaseHoldEventFilter;
    ReleaseHold(
      holdId?: PromiseOrValue<BytesLike> | null,
      sender?: null
    ): ReleaseHoldEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOnHold(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "executeHold(bytes32,bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "executeHold(bytes32,bytes32,address)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "executeHold(bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hold(
      holdId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    holdStatus(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseHold(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrieveHoldData(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spendableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOnHold(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "executeHold(bytes32,bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "executeHold(bytes32,bytes32,address)"(
      holdId: PromiseOrValue<BytesLike>,
      lockPreimage: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "executeHold(bytes32)"(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hold(
      holdId: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      notary: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expirationDateTime: PromiseOrValue<BigNumberish>,
      lockHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    holdStatus(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseHold(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrieveHoldData(
      holdId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spendableBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyOnHold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
